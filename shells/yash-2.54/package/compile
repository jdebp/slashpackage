#!/bin/sh -e
# See http://jdebp.uk./FGA/slashpackage.html
if test \! -d package
then
	echo "You are not in the right directory." 1>&2
	exit 100
fi

name='yash'
version='2.54'

if test -d ../"${name}.git"
then
	# Create and checkout the source directory
	if test \! -d source
	then
		install -d -m 0755 source
		rm -f -- source/.git
		ln -f -s -- ../../"${name}.git" source/.git
		( cd source && git checkout -f "${version}" )
		# Apply our patches
		find package/patches -name '*.patch' |
		while read -r patchfile
		do
			patch -t -N -d source/ -i ../"${patchfile}"
		done
	fi
else
	# Download the source
	if test \! -d dist/"${name}-${version}"/
	then
		install -d -m 0755 dist
		case "`uname`" in
		Linux) fetch=wget ; FETCHARGS= ;;
		OpenBSD) fetch=ftp ; FETCHARGS= ;;
		*BSD) fetch=fetch ; FETCHARGS="-S ${SIZE}" ;;
		esac
		extension='.tar.gz'
		#url='https://osdn.net/frs/redir.php?m=nchc&f=yash%2F78345%2F'"${name}-${version}${extension}"
		#SHA256='dbd078790110a4279db327ff8998b857e3a177209bcd7c9068cd2e16d9c59968'
		#SIZE='1235539'
		extension='.tar.xz'
		url='https://github.com/magicant/yash/releases/download/'"${version}"/"${name}-${version}${extension}"
		SHA256='44a0ac1ccf7c3acecfbea027d8c0c930f13a828065be318055ce113015391839'
		SIZE='758916'
		archive="${name}-${version}${extension}" 
		( 
			cd dist 
			"${fetch}" -o "${archive}" "${url}"
			sha256 -c "${SHA256}" "${archive}"
			pax -r -z < "${archive}"
		)
		# Cleanup bogus stuff in the source archive
		find dist/"${name}-${version}"/ -name \*.d -delete
		find dist/"${name}-${version}"/doc/ -name \*.html -delete
		find dist/"${name}-${version}"/po/ -name \*.mo -delete
		rm -f dist/"${name}-${version}"/po/en@boldquot.ih
		rm -f dist/"${name}-${version}"/po/en@boldquot.po
		rm -f dist/"${name}-${version}"/po/en@quot.ih
		rm -f dist/"${name}-${version}"/po/en@quot.po
		rm -f dist/"${name}-${version}"/po/yash.pot
		rm -f dist/"${name}-${version}"/po/stamp-po
		rm -f dist/"${name}-${version}"/doc/yash.1
		rm -f dist/"${name}-${version}"/doc/yash.txt
		rm -f dist/"${name}-${version}"/doc/index.txt
		rm -f dist/"${name}-${version}"/doc/ja/yash.1
		rm -f dist/"${name}-${version}"/doc/ja/yash.txt
		rm -f dist/"${name}-${version}"/doc/ja/index.txt
		rm -r -f -- source
	fi

	# Create and populate the source directory
	if test \! -d source
	then
		install -d -m 0755 source
		( cd dist/"${name}-${version}" && ( 2>/dev/null pax -w -r -l -u -- * ../../source/ || true ) )
		# Apply our patches
		find package/patches -name '*.patch' |
		while read -r patchfile
		do
			patch -t -N -d source/ -i ../"${patchfile}"
		done
	fi
fi

export CDPATH=

# Create and populate the build directory.
install -d -m 0755 build
( cd source && ( 2>/dev/null pax -w -r -l -u -- * ../build/ || true ) )

# Rebuild.
if ! > /dev/null expr "${MAKEFLAGS}" : "--jobs" &&
   ! > /dev/null expr "${REDOFLAGS}" : "--jobs"
then
	case "`uname`" in
	Linux) cpus="`grep -F -c processor /proc/cpuinfo`" ;;
	*BSD) cpus="`sysctl -n hw.ncpu`" ;;
	esac
	if > /dev/null expr "${cpus}" '>' 4
	then
		cpus=4
	fi
fi
(
	cd build
	test -r config.status || sh ./configure --disable-nls
	make ${cpus:+ -j "${cpus}"}
)

# Atomically update the release directories ./command, ./library, ./include, and so forth.
# The build and release directories need not be on the same disc volume.
# And the files released must not be potentially overwritable and truncatable by the compiler/linker during subsequent builds.
# But released files can be links to other released files, of course.
install -d -m 0755 command manual config manual/ja config/locale config/share

# ##############################################################################
# Build all of the ...{new} files in ./command and ./manual.
for section in 1 2 3 4 5 6 7 8 9
do
	# All of the commands that have executables
	test -r package/commands${section} && cat package/commands${section} |
	while read -r i
	do
		rm -f -- command/"$i"{new}
		if objdump -f build/"$i" >/dev/null 2>&1
		then
			install -m 0755 -p -- build/"$i" command/"$i"{new}
			strip -p -- command/"$i"{new}
			chmod 0555 command/"$i"{new}
		else
			install -m 0555 -p -- build/"$i" command/"$i"{new}
		fi
	done
	# All of the aliases for other commands
	test -r package/aliases${section} && cat package/aliases${section} |
	while read -r command alias
	do
		rm -f -- command/"${alias}"{new}
		ln -f -- command/"${command}"{new} command/"${alias}"{new}
	done
	# All of the commands that have their own manual pages
	(
		test -r package/commands${section} && cat package/commands${section}
		test -r package/extra-manpages${section} && cat package/extra-manpages${section}
	) |
	while read -r i
	do
		install -d -m 0755 -- manual/man${section} manual/ja/man${section}
		rm -f -- manual/man${section}/"$i".${section}{new}
		install -m 0444 -p -- build/doc/"$i".${section} manual/man${section}/"$i".${section}{new}
		install -m 0444 -p -- build/doc/ja/"$i".${section} manual/ja/man${section}/"$i".${section}{new}
	done
	# All of the manual pages for aliases
	test -r package/aliases${section} && cat package/aliases${section} |
	while read -r command alias
	do
		test -r package/commands${section} && grep -q -- "^${alias}\$" package/commands${section} && continue
		test -r package/extra-manpages${section} && grep -q -- "^${alias}\$" package/extra-manpages${section} && continue
		ln -f -s -- "${command}".${section} manual/man${section}/"${alias}".${section}{new}
		ln -f -s -- "${command}".${section} manual/ja/man${section}/"${alias}".${section}{new}
	done
done
# Symbolic links in place of subdirectories to fool the man(1) command
for directory in en_GB.UTF-8 en.UTF-8
do
	rm -f -- manual/"${directory}"{new}
	ln -f -s -- . manual/"${directory}"{new}
done
for directory in ja_JP.UTF-8 ja.UTF-8
do
	rm -f -- manual/"${directory}"{new}
	ln -f -s -- ja manual/"${directory}"{new}
done

# ##############################################################################
# Rename the ...{new} files in ./command and ./manual.
for section in 1 2 3 4 5 6 7 8 9
do
	# All of the commands that have executables and all of their aliases
	(
		test -r package/commands${section} && cat package/commands${section}
		test -r package/aliases${section} && awk '{print $2;}' package/aliases${section}
	) |
	while read -r i
	do
		mv -f -- command/"$i"{new} command/"$i"
	done
	# All of the commands that have their own manual pages
	(
		test -r package/commands${section} && cat package/commands${section}
		test -r package/extra-manpages${section} && cat package/extra-manpages${section}
	) |
	while read -r i
	do
		mv -f -- manual/man${section}/"$i".${section}{new} manual/man${section}/"$i".${section}
		mv -f -- manual/ja/man${section}/"$i".${section}{new} manual/ja/man${section}/"$i".${section}
	done
	# All of the manual pages for aliases
	test -r package/aliases${section} && cat package/aliases${section} |
	while read -r command alias
	do
		test -r package/commands${section} && grep -q -- "^${alias}\$" package/commands${section} && continue
		test -r package/extra-manpages${section} && grep -q -- "^${alias}\$" package/extra-manpages${section} && continue
		mv -f -- manual/man${section}/"${alias}".${section}{new} manual/man${section}/"${alias}".${section}
		mv -f -- manual/ja/man${section}/"${alias}".${section}{new} manual/ja/man${section}/"${alias}".${section}
	done
done
# Symbolic links in place of subdirectories to fool the man(1) command
for directory in en_GB.UTF-8 en.UTF-8 ja_JP.UTF-8 ja.UTF-8
do
	test -e manual/"${directory}" && mv -f -- manual/"${directory}" manual/"${directory}"{old}
	mv -f -- manual/"${directory}"{new} manual/"${directory}"
	rm -f -- manual/"${directory}"{old}
done

# ##############################################################################
# Build all of the ...{new} files in ./config.
for mo in build/po/*.mo
do
	i="`basename \"${mo}\" .mo`"
	install -d -m 0755 -- config/locale/"$i"/LC_MESSAGES
	rm -f -- config/locale/"$i"/LC_MESSAGES/yash.mo{new}
	install -m 0444 -p -- "${mo}" config/locale/"$i"/LC_MESSAGES/yash.mo{new}
done
rm -r -f -- config/share{new}/
install -d -m 0755 config/share{new}
( cd build/share/ && pax -r -w * ../../config/share{new}/ )
mv -f -- config/share{new}/config config/share{new}/config.nonslashpackage
cwd="`/bin/pwd`"
sed \
	-e 's:/usr/local/bin:'${cwd}'/command:g' \
	-e 's:/usr/local/share/yash:'${cwd}'/config/share:g' \
	-e 's:/usr/local/share/man:'${cwd}'/manual:g' \
	-e 's:/usr/local/share/doc/yash:'${cwd}'/doc:g' \
	-e 's:/usr/local/share/locale:'${cwd}'/config/locale:g' \
	config/share{new}/config.nonslashpackage > config/share{new}/config

# ##############################################################################
# Rename the ...{new} directories and files in ./config.
for mo in build/po/*.mo
do
	i="`basename \"${mo}\" .mo`"
	mv -f -- config/locale/"$i"/LC_MESSAGES/yash.mo{new} config/locale/"$i"/LC_MESSAGES/yash.mo
done
test -e config/share && mv -f -- config/share config/share{old}
mv -f -- config/share{new} config/share
rm -r -f -- config/share{old}
