--- ./src/display/fblinear4.cpp.orig	2002-05-12 04:58:28.000000000 +0100
+++ ./src/display/fblinear4.cpp	2023-05-21 18:17:55.635692476 +0100
@@ -34,7 +34,9 @@
 
 FBLinear4::FBLinear4() {
     InitColorMap();
+#if defined(OLD_FREEBSD_MODE)
     mNextLine = mNextLine ? mNextLine : mXres>>1;
+#endif
 }
 
 void FBLinear4::InitColorMap() {}
@@ -62,8 +64,8 @@
 
         // x is odd.  Read-modify-write right pixel.
         if (x1 & 0x01) {
-            bits = fb_readb(dest);
-            fb_writeb((bits & 0x0f) | (fg & 0xf0), dest);
+            bits = fb_read(dest);
+            fb_write((bits & 0x0f) | (fg & 0xf0), dest);
             dest++;
             w--;
         }
@@ -73,8 +75,8 @@
         // Dangling right pixel.
         if (w & 0x01) {
             dest += w/2;
-            bits = fb_readb(dest);
-            fb_writeb((bits & 0x0f) | (fg & 0xf0), dest);
+            bits = fb_read(dest);
+            fb_write((bits & 0x0f) | (fg & 0xf0), dest);
         }
     }
     
@@ -91,7 +93,7 @@
 
     if (x1 == 0 && width * 4 == bytes) {
         for (i = 0 ; i < lines * width ; i++) {
-        fb_writel (bgx, dest);
+        fb_write (bgx, (__u32*)dest);
         dest+=4;
         }
     } else {
@@ -99,7 +101,7 @@
         for (row = lines; row-- ; dest0 += bytes) {
             dest=dest0;
             for (i = 0 ; i < width ; i++) {
-            fb_writel (bgx, dest);
+            fb_write (bgx, (__u32*)dest);
             dest+=4;
         }
     }
@@ -113,10 +115,10 @@
     __u8 xs;
     
     dest = (__u8*)mpBuf + mNextLine * y + x / 2;
-    bits = fb_readb(dest);
+    bits = fb_read(dest);
 
     xs = (x & 1) << 2;
-    fb_writeb((bits & (0x0F << xs)) | ((color & 0x0f) << (xs ^ 4)), dest);
+    fb_write((bits & (0x0F << xs)) | ((color & 0x0f) << (xs ^ 4)), dest);
 }
 
 void FBLinear4::DrawChar(int x,int y,int fg,int bg,struct CharBitMap* pFont) {
@@ -138,22 +140,22 @@
     char* cdat = pFont->pBuf;
     for (row = mBlockHeight; row-- ; dest += mNextLine) {
         bits = *cdat++;
-        fb_writew((nibbletab_cfb4[bits >> 4] & eorx) ^ bgx, dest+0);
-        fb_writew((nibbletab_cfb4[bits & 0xf] & eorx) ^ bgx, dest+2);
+        fb_write((nibbletab_cfb4[bits >> 4] & eorx) ^ bgx, reinterpret_cast<__u16*>(dest+0));
+        fb_write((nibbletab_cfb4[bits & 0xf] & eorx) ^ bgx, reinterpret_cast<__u16*>(dest+2));
         if (pFont->w < 12) continue;    // fontwidth = 8
 
         bits = *cdat++;
-        fb_writew((nibbletab_cfb4[bits >> 4] & eorx) ^ bgx, dest+3);
+        fb_write((nibbletab_cfb4[bits >> 4] & eorx) ^ bgx, reinterpret_cast<__u16*>(dest+3));
         if (pFont->w < 16) continue;    // fontwidth = 12
 
-        fb_writew((nibbletab_cfb4[bits & 0xf] & eorx) ^ bgx, dest+4);
+        fb_write((nibbletab_cfb4[bits & 0xf] & eorx) ^ bgx, reinterpret_cast<__u16*>(dest+4));
         if (pFont->w < 20) continue;    // fontwidth = 16
 
         bits = *cdat++;
-        fb_writew((nibbletab_cfb4[bits >> 4] & eorx) ^ bgx, dest+5);
+        fb_write((nibbletab_cfb4[bits >> 4] & eorx) ^ bgx, reinterpret_cast<__u16*>(dest+5));
         if (pFont->w < 24) continue;    // fontwidth = 20
 
-        fb_writew((nibbletab_cfb4[bits & 0xf] & eorx) ^ bgx, dest+6);
+        fb_write((nibbletab_cfb4[bits & 0xf] & eorx) ^ bgx, reinterpret_cast<__u16*>(dest+6));
         // fontwidth = 24
     }
 }
