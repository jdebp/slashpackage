--- ./src/display/fblinear8.cpp.orig	2002-05-12 04:58:28.000000000 +0100
+++ ./src/display/fblinear8.cpp	2023-05-21 18:42:39.847590043 +0100
@@ -29,7 +29,9 @@
 };
 
 FBLinear8::FBLinear8() {
+#if defined(OLD_FREEBSD_MODE)
     mNextLine = mNextLine ? mNextLine : mXres;
+#endif
 }
 
 void FBLinear8::FillRect(int x1,int y1,int x2,int y2,int color) {
@@ -44,27 +46,26 @@
     assert( x1 >= 0 && x1 < Width() && y1 >=0 && y1 < Height());
     assert( x2 >= 0 && x2 < Width() && y2 >=0 && y2 < Height());
     assert(x1 <= x2 && y1 <= y2);
-    __u8* dest = (__u8*)mpBuf + mNextLine * y1 + x1;
+    __u8* dest = reinterpret_cast<__u8*>(mpBuf) + mNextLine * y1 + x1;
 
     int height = y2 - y1 + 1;
     int width = x2 - x1 + 1;
     int cnt;
-    __u8* dest8;
-    __u16* dest16;
-    __u32 *dest32;
     for(; height--; dest += mNextLine) {
-        dest32 = (__u32*)dest;
+        __u32* dest32 = (__u32*)dest;
         for (cnt = width/4; cnt--;) {
-            fb_writel(fb_readl(dest32) ^ 0x0f0f0f0f, dest32++);
+            fb_write(fb_read(dest32) ^ 0x0f0f0f0f, dest32);
+            ++dest32;
         }
         if (width & 2) {
-            dest16 = (__u16*)dest32;
-            fb_writew(fb_readw(dest16) ^ 0x0f0f, dest16++);
-            dest32 = (__u32*)dest16;
+            __u16* dest16 = reinterpret_cast<__u16*>(dest32);
+            fb_write(fb_read(dest16) ^ 0x0f0f, dest16);
+            dest32 = reinterpret_cast<__u32*>(++dest16);
         }
         if (width & 1) {
-            dest8 = (__u8*)dest32;
-            fb_writeb(fb_readb(dest8) ^ 0x0f, dest8);
+            __u8* dest8 = reinterpret_cast<__u8*>(dest32);
+            fb_write(fb_read(dest8) ^ 0x0f, dest8);
+            dest32 = reinterpret_cast<__u32*>(++dest8);
         }
     }
 }
@@ -83,29 +84,32 @@
     bgx |= (bgx << 16);
     eorx = fgx ^ bgx;
 
-    __u8* dest = ((__u8*)mpBuf + mNextLine * y + x);
-    __u32* dest32;
+    __u8* dest = reinterpret_cast<__u8*>(mpBuf) + mNextLine * y + x;
 
     char* cdat = pFont->pBuf;
     int rows, cnt;
     for (rows = mBlockHeight; rows-- ; dest += mNextLine) {
-        dest32 = (__u32*)dest;
+        __u32* dest32 = (__u32*)dest;
         for (cnt = (pFont->w)/8; cnt--;) {
-            fb_writel((nibbletab_cfb8[*cdat >> 4] & eorx) ^ bgx, dest32++);
-            fb_writel((nibbletab_cfb8[*cdat & 0xf] & eorx) ^ bgx, dest32++);
+            fb_write((nibbletab_cfb8[*cdat >> 4] & eorx) ^ bgx, dest32++);
+            fb_write((nibbletab_cfb8[*cdat & 0xf] & eorx) ^ bgx, dest32++);
             cdat++;
         }
         if (pFont->isMulti8)
             continue;
 
         if (pFont->w & 4) {
-            fb_writel((nibbletab_cfb8[*cdat >> 4] & eorx) ^ bgx, dest32++);
+            fb_write((nibbletab_cfb8[*cdat >> 4] & eorx) ^ bgx, dest32++);
         }
         if (pFont->w & 2) {
-            fb_writew((nibbletab_cfb8[*cdat & 0xc] & eorx) ^ bgx, ((__u16*)dest32)++);
+            __u16* dest16 = reinterpret_cast<__u16*>(dest32);
+            fb_write((nibbletab_cfb8[*cdat & 0xc] & eorx) ^ bgx, dest16);
+            dest32 = reinterpret_cast<__u32*>(++dest16);
         }
         if (pFont->w & 1) {
-            fb_writeb((*cdat & 2) ? fg : bg, (__u8*)dest32);
+            __u8* dest8 = reinterpret_cast<__u8*>(dest32);
+            fb_write((*cdat & 2) ? fg : bg, dest8);
+            dest32 = reinterpret_cast<__u32*>(++dest8);
         }
         cdat++;
     }
